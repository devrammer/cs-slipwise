// btree.h


typedef struct node 
{
    int data;
    struct node* left;
    struct node* right;
} Node;

Node* create_node(int data) 
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

Node* insert(Node* root, int data)
{
    if (root == NULL) 
    {
        return create_node(data);
    }
    if (data < root->data) 
    {
        root->left = insert(root->left, data);
    }
    else if (data > root->data) 
    {
        root->right = insert(root->right, data);
    }
    return root;
}

void inorder(Node* root) 
{
    if (root != NULL) 
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void preorder(Node* root) 
{
    if (root != NULL) 
    {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(Node* root) 
{
    if (root != NULL) 
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}