//level count


#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int data;
  struct node* left;
  struct node* right;
} node;

node* newNode(int data) 
{
  node* Node = (node *)malloc(sizeof(node));
  Node->data = data;
  Node->left = NULL;
  Node->right = NULL;
  return Node;
}


void insert(node** root, int data) 
{
  if (*root == NULL) 
  {
    *root = newNode(data);
  } 
  else if (data < (*root)->data) 
  {
    insert(&(*root)->left, data);
  } 
  else 
  {
    insert(&(*root)->right, data);
  }
}


void printNodesAtEachLevel(node* root, int level)
{
   if (root == NULL) 
	{
   	 return;
 	 }

  if (level == 1) 
 {
    printf("%d ", root->data);
  } else {
    printNodesAtEachLevel(root->left, level - 1);
    printNodesAtEachLevel(root->right, level - 1);
  }
}


int countNodesAtEachLevel(node* root, int level, int* count) {
  if (root == NULL) {
    return 0;
  }

  if (level == 1) {
    (*count)++;
  } else {
    countNodesAtEachLevel(root->left, level - 1, count);
    countNodesAtEachLevel(root->right, level - 1, count);
  }

  return 1;
}

int main() {
 
  node* root = NULL;

  
  insert(&root, 10);
  insert(&root, 5);
  insert(&root, 15);
  insert(&root, 2);
  insert(&root, 7);
  insert(&root, 12);
  insert(&root, 17);

  
  printf("Nodes at each level of the binary search tree:\n");
  for (int i = 1; i <= 3; i++) {
    printNodesAtEachLevel(root, i);
    printf("\n");
  }

  
  int count[4] = {0};
  for (int i = 1; i <= 3; i++) {
    countNodesAtEachLevel(root, i, &count[i - 1]);
  }

 
  printf("Number of nodes at each level of the binary search tree:\n");
  for (int i = 0; i < 3; i++) {
    printf("Level %d: %d\n", i + 1, count[i]);
  }

  return 0;
}